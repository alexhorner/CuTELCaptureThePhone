@using CutelCaptureThePhone.Core.Models
@using CutelCaptureThePhone.Core.Providers
@model PublicBasicLeaderboardViewModel
@inject IMapPinProvider MapPinProvider
@{
    ViewBag.Title = "Public Basic Leaderboard";
    ViewBag.IgnoreNavItems = true;

    PlayerModel? mostUniqueCapturesPlayer = Model.Players.MaxBy(p => p.Captures!.GroupBy(c => c.FromNumber).Count());
    PlayerModel? mostCapturesOverall = Model.Players.MaxBy(p => p.Captures!.Count);

    uint count = 1;
}

<div class="mt-2 mx-4">
    <div class="hide-mobile">
        <div class="d-flex justify-content-center my-2">
            <div class="card mx-1">
                <div class="card-body user-select-none text-center">
                    <h5 class="card-title">Most Unique Captures</h5>
                    <p class="card-text fs-3"><span class="badge bg-secondary">@(mostUniqueCapturesPlayer?.Name ?? "None") <span class="badge bg-white text-dark">@(mostUniqueCapturesPlayer?.Captures!.GroupBy(c => c.FromNumber).Count() ?? 0)</span></span></p>
                </div>
            </div>

            <div class="card mx-1">
                <div class="card-body user-select-none text-center">
                    <h5 class="card-title">Most Captures Overall</h5>
                    <p class="card-text fs-3"><span class="badge bg-secondary">@(mostCapturesOverall?.Name ?? "None") <span class="badge bg-white text-dark">@(mostCapturesOverall?.Captures!.Count ?? 0)</span></span></p>
                </div>
            </div>
        </div>

        <table class="table table-bordered align-middle mt-4">
            <tr>
                <th>Position</th>
                <th>Name</th>
                <th>Unique Captures</th>
                <th>Unique Periods</th>
                <th>Total Captures</th>
                <th>Total Periods</th>
                <th>First Capture</th>
                <th>Latest Capture</th>
            </tr>

            @foreach (PlayerModel player in Model.Players)
            {
                <tr>
                    <td class="fw-bold">#@count</td>
                    <td>@player.Name</td>
                    <td>@(player.Captures!.GroupBy(c => c.FromNumber).Count())</td>
                    <td><span class="fw-bold">1hr</span> - @player.Captures!.Where(c => c.Created > DateTime.UtcNow - TimeSpan.FromHours(1)).GroupBy(c => c.FromNumber).Count() / <span class="fw-bold">12h</span> - @(player.Captures!.Where(c => c.Created > DateTime.UtcNow - TimeSpan.FromHours(12)).GroupBy(c => c.FromNumber).Count()) / <span class="fw-bold">24h</span> - @(player.Captures!.Where(c => c.Created > DateTime.UtcNow - TimeSpan.FromHours(24)).GroupBy(c => c.FromNumber).Count())</td>
                    <td>@player.Captures!.Count</td>
                    <td><span class="fw-bold">1hr</span> - @player.Captures!.Count(c => c.Created > DateTime.UtcNow - TimeSpan.FromHours(1)) / <span class="fw-bold">12hr</span> - @player.Captures!.Count(c => c.Created > DateTime.UtcNow - TimeSpan.FromHours(12)) / <span class="fw-bold">24hr</span> - @player.Captures!.Count(c => c.Created > DateTime.UtcNow - TimeSpan.FromHours(24))</td>
                    <td>
                        @{
                            CaptureModel? firstCapture = player.Captures.MinBy(c => c.Created);

                            if (firstCapture is null)
                            {
                                <span class="text-muted fst-italic">None</span>
                            }
                            else
                            {
                                MapPinModel? mapPinByNumber = await MapPinProvider.GetByNumberAsync(firstCapture.FromNumber);
                                        
                                @(mapPinByNumber is not null ? mapPinByNumber.Name : firstCapture.FromNumber)
                                <span class="badge bg-secondary">@firstCapture.Created</span>
                            }
                        }
                    </td>
                    <td>
                        @{
                            CaptureModel? latestCapture = player.Captures.MaxBy(c => c.Created);

                            if (latestCapture is null)
                            {
                                <span class="text-muted fst-italic">None</span>
                            }
                            else
                            {
                                MapPinModel? mapPinByNumber = await MapPinProvider.GetByNumberAsync(latestCapture.FromNumber);
                                        
                                @(mapPinByNumber is not null ? mapPinByNumber.Name : latestCapture.FromNumber)
                                <span class="badge bg-secondary">@latestCapture.Created</span>
                            }
                        }
                    </td>
                </tr>

                count++;
            }
        </table>
    </div>

    <div class="show-mobile">
        <div class="card mx-1 mb-2">
            <div class="card-body user-select-none text-center">
                <h5 class="card-title">Most Unique Captures</h5>
                <p class="card-text fs-3"><span class="badge bg-secondary">@(mostUniqueCapturesPlayer?.Name ?? "None") <span class="badge bg-white text-dark">@(mostUniqueCapturesPlayer?.Captures!.GroupBy(c => c.FromNumber).Count() ?? 0)</span></span></p>
            </div>
        </div>

        <div class="card mx-1 mb-4">
            <div class="card-body user-select-none text-center">
                <h5 class="card-title">Most Captures Overall</h5>
                <p class="card-text fs-3"><span class="badge bg-secondary">@(mostCapturesOverall?.Name ?? "None") <span class="badge bg-white text-dark">@(mostCapturesOverall?.Captures!.Count ?? 0)</span></span></p>
            </div>
        </div>
        
        <div>
            @{
                count = 1;
                
                foreach (PlayerModel player in Model.Players)
                {
                    int uniqueCaptureCount = player.Captures!.GroupBy(c => c.FromNumber).Count();
                    
                    <div class="card mb-2">
                        <div class="card-header">
                            <span class="fw-bold">#@count</span>&nbsp;-&nbsp;@player.Name
                        </div>
                        
                        <div class="card-body">
                            <div class="mb-2">@player.Captures!.Count capture@(player.Captures!.Count == 1 ? "" : "s") across @uniqueCaptureCount unique phone@(uniqueCaptureCount == 1 ? "" : "s")</div>
                            
                            <div>
                                <span class="fw-bold">First capture:</span>
                                @{
                                    CaptureModel? firstCapture = player.Captures.MinBy(c => c.Created);

                                    if (firstCapture is null)
                                    {
                                        <span class="text-muted fst-italic">None</span>
                                    }
                                    else
                                    {
                                        MapPinModel? mapPinByNumber = await MapPinProvider.GetByNumberAsync(firstCapture.FromNumber);
                                        
                                        @(mapPinByNumber is not null ? mapPinByNumber.Name : firstCapture.FromNumber)
                                        <span class="badge bg-secondary">@firstCapture.Created</span>
                                    }
                                }
                            </div>

                            <div>
                                <span class="fw-bold">Latest capture:</span>
                                @{
                                    CaptureModel? latestCapture = player.Captures.MaxBy(c => c.Created);

                                    if (latestCapture is null)
                                    {
                                        <span class="text-muted fst-italic">None</span>
                                    }
                                    else
                                    {
                                        MapPinModel? mapPinByNumber = await MapPinProvider.GetByNumberAsync(latestCapture.FromNumber);
                                        
                                        @(mapPinByNumber is not null ? mapPinByNumber.Name : latestCapture.FromNumber)
                                        <span class="badge bg-secondary">@latestCapture.Created</span>
                                    }
                                }
                            </div>
                        </div>
                    </div>

                    count++;
                }
            }
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        //Render last update time
        let currentDate = new Date();
        let currentDateString = currentDate.toDateString();
        let currentTimeString = currentDate.toLocaleTimeString();
        
        document.getElementById("footer-note").innerHTML = '<span class="fw-bold">Last Updated:</span>&nbsp;' + currentDateString + " " + currentTimeString;
        
        //Reload page every 10 seconds
        setTimeout(() => { window.location.reload() }, 10000);
    </script>
}
